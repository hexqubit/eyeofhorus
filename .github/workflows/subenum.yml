name: Subdomain Enumeration

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Target domain to scan'
        required: true
        default: 'siasindia.com'

jobs:
  enumerate-subdomains:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Add bin directory to PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod -R +x $GITHUB_WORKSPACE/bin
      
      - name: Setup Python for subcat
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install subcat
        run: |
          pip install pipx
          pipx install subcat
          echo "$(pipx environment --value PIPX_BIN_DIR)" >> $GITHUB_PATH
      
      - name: Set target domain
        run: |
          echo "TARGET_DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
      
      - name: Create output directory
        run: mkdir -p subdomain_results
      
      - name: Run subcat
        run: |
          subcat -silent -d ${{ env.TARGET_DOMAIN }} -o subdomain_results/subcat.txt || echo "Subcat failed"
    
      - name: Run Assetfinder
        run: |
          assetfinder --subs-only ${{ env.TARGET_DOMAIN }} | tee subdomain_results/assetfinder.txt || echo "Assetfinder failed"

      - name: Run Subfinder
        run: |
          subfinder -d ${{ env.TARGET_DOMAIN }} -all -recursive -t 200 -silent -o subdomain_results/subfinder-rescursive.txt || echo "Subfinder failed"
          
      - name: Run Findomain
        run: |
          findomain --quiet -t ${{ env.TARGET_DOMAIN }} | tee subdomain_results/findomain.txt || echo "Findomain failed"
    
      - name: Run GitHub Subdomains
        env:
          GITHUB_TOKEN: ${{ secrets.GH_SUBDOMAIN_TOKEN }}
        run: |
          github-subdomains -d ${{ env.TARGET_DOMAIN }} -t $GITHUB_TOKEN -o subdomain_results/github.txt || echo "GitHub subdomains failed"
      
      - name: Combine and sort results
        run: |
          cd subdomain_results
          sort -u assetfinder.txt findomain.txt subcat.txt subfinder-rescursive.txt > passive.txt
          rm assetfinder.txt findomain.txt subcat.txt subfinder-rescursive.txt
          
          if [ -s passive.txt ] && [ -s github.txt ]; then
            grep -Fxvi -f passive.txt github.txt > unique_domains.txt || touch unique_domains.txt
          else
            touch unique_domains.txt
          fi
    
      - name: Upload results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: subdomain-enum-results-${{ env.TARGET_DOMAIN }}-${{ github.run_id }}
          path: subdomain_results/
          retention-days: 7
      
      - name: Configure Git
        run: |
          git config --global user.name "hexqubitone"
          git config --global user.email "hexqubitone@users.noreply.github.com"
          # Set merge strategy to avoid divergent branch errors
          git config --global pull.rebase false
      
      - name: Commit enumeration results
        run: |
          mkdir -p subdomains/${{ env.TARGET_DOMAIN }}
          cp -r subdomain_results/* subdomains/${{ env.TARGET_DOMAIN }}/
          
          git add subdomains/${{ env.TARGET_DOMAIN }}
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Subdomain enumeration results for ${{ env.TARGET_DOMAIN }} - 2025-04-19 11:25:31"
            
            # Try to push, if fails pull and try again
            if ! git push; then
              git pull --no-rebase
              git push
            fi
          fi

  # Parallel HTTP probe jobs
  probe-unique-domains:
    needs: enumerate-subdomains
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add bin directory to PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod -R +x $GITHUB_WORKSPACE/bin
      
      - name: Set target domain
        run: |
          echo "TARGET_DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
      
      - name: Download subdomain results
        uses: actions/download-artifact@v4
        with:
          name: subdomain-enum-results-${{ env.TARGET_DOMAIN }}-${{ github.run_id }}
          path: subdomain_results
      
      - name: Configure Git
        run: |
          git config --global user.name "hexqubitone"
          git config --global user.email "hexqubitone@users.noreply.github.com"
          # Set merge strategy to avoid divergent branch errors
          git config --global pull.rebase false
      
      - name: HTTP probe unique domains
        run: |
          httpx -l subdomain_results/unique_domains.txt -title -sc -silent -no-color -location -p 80,443,8000,8080,8443 -td -cl -probe -o subdomain_results/httpx_output_unique.txt
      
      - name: Commit probe results
        run: |
          mkdir -p subdomains/${{ env.TARGET_DOMAIN }}
          cp subdomain_results/httpx_output_unique.txt subdomains/${{ env.TARGET_DOMAIN }}/
          
          git add subdomains/${{ env.TARGET_DOMAIN }}/httpx_output_unique.txt
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "HTTP probe results (unique) for ${{ env.TARGET_DOMAIN }} - 2025-04-19 11:25:31"
            
            # Try to push, if fails pull and try again
            if ! git push; then
              git pull --no-rebase
              git push
            fi
          fi

  probe-github-domains:
    needs: enumerate-subdomains
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add bin directory to PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod -R +x $GITHUB_WORKSPACE/bin
      
      - name: Set target domain
        run: |
          echo "TARGET_DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
      
      - name: Download subdomain results
        uses: actions/download-artifact@v4
        with:
          name: subdomain-enum-results-${{ env.TARGET_DOMAIN }}-${{ github.run_id }}
          path: subdomain_results
      
      - name: Configure Git
        run: |
          git config --global user.name "hexqubitone"
          git config --global user.email "hexqubitone@users.noreply.github.com"
          # Set merge strategy to avoid divergent branch errors
          git config --global pull.rebase false
      
      - name: HTTP probe github domains
        run: |
          httpx -l subdomain_results/github.txt -title -sc -silent -no-color -location -p 80,443,8000,8080,8443 -td -cl -probe -o subdomain_results/httpx_output_github.txt
      
      - name: Commit probe results
        run: |
          mkdir -p subdomains/${{ env.TARGET_DOMAIN }}
          cp subdomain_results/httpx_output_github.txt subdomains/${{ env.TARGET_DOMAIN }}/
          
          git add subdomains/${{ env.TARGET_DOMAIN }}/httpx_output_github.txt
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "HTTP probe results (github) for ${{ env.TARGET_DOMAIN }} - 2025-04-19 11:25:31"
            
            # Try to push, if fails pull and try again
            if ! git push; then
              git pull --no-rebase
              git push
            fi
          fi

  probe-passive-domains:
    needs: enumerate-subdomains
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add bin directory to PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod -R +x $GITHUB_WORKSPACE/bin
      
      - name: Set target domain
        run: |
          echo "TARGET_DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
      
      - name: Download subdomain results
        uses: actions/download-artifact@v4
        with:
          name: subdomain-enum-results-${{ env.TARGET_DOMAIN }}-${{ github.run_id }}
          path: subdomain_results
      
      - name: Configure Git
        run: |
          git config --global user.name "hexqubitone"
          git config --global user.email "hexqubitone@users.noreply.github.com"
          # Set merge strategy to avoid divergent branch errors
          git config --global pull.rebase false
      
      - name: HTTP probe passive domains
        run: |
          httpx -l subdomain_results/passive.txt -title -sc -silent -no-color -location -p 80,443,8000,8080,8443 -td -cl -probe -o subdomain_results/httpx_output_passive.txt
      
      - name: Commit probe results
        run: |
          mkdir -p subdomains/${{ env.TARGET_DOMAIN }}
          cp subdomain_results/httpx_output_passive.txt subdomains/${{ env.TARGET_DOMAIN }}/
          
          git add subdomains/${{ env.TARGET_DOMAIN }}/httpx_output_passive.txt
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "HTTP probe results (passive) for ${{ env.TARGET_DOMAIN }} - 2025-04-19 11:25:31"
            
            # Try to push, if fails pull and try again
            if ! git push; then
              git pull --no-rebase
              git push
            fi
          fi

  # Parallel screenshot jobs
  screenshot-unique-domains:
    needs: probe-unique-domains
    runs-on: ubuntu-latest
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add bin directory to PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod -R +x $GITHUB_WORKSPACE/bin
      
      - name: Set target domain
        run: |
          echo "TARGET_DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
      
      - name: Get httpx results from repository
        run: |
          mkdir -p subdomain_results
          cp subdomains/${{ env.TARGET_DOMAIN }}/httpx_output_unique.txt subdomain_results/ || echo "File not found, will be created later"
      
      - name: Install Chromium for screenshots
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser xvfb
      
      - name: Take screenshots - Unique Domains
        run: |
          if [ -f subdomain_results/httpx_output_unique.txt ]; then
            mkdir -p screenshots_unique
            cd screenshots_unique
            cat ../subdomain_results/httpx_output_unique.txt | grep "\[SUCCESS\] \[200\]" | awk '{print $1}' > urls.txt
            gowitness scan file -f urls.txt --threads 10 --screenshot-path ./screenshots --write-db
            cd ..
          fi
      
      - name: Upload unique screenshots
        uses: actions/upload-artifact@v4
        with:
          name: unique-screenshots-${{ env.TARGET_DOMAIN }}-${{ github.run_id }}
          path: screenshots_unique/
          retention-days: 7

  screenshot-github-domains:
    needs: probe-github-domains
    runs-on: ubuntu-latest
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add bin directory to PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod -R +x $GITHUB_WORKSPACE/bin
      
      - name: Set target domain
        run: |
          echo "TARGET_DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
      
      - name: Get httpx results from repository
        run: |
          mkdir -p subdomain_results
          cp subdomains/${{ env.TARGET_DOMAIN }}/httpx_output_github.txt subdomain_results/ || echo "File not found, will be created later"
      
      - name: Install Chromium for screenshots
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser xvfb
      
      - name: Take screenshots - GitHub Domains
        run: |
          if [ -f subdomain_results/httpx_output_github.txt ]; then
            mkdir -p screenshots_github
            cd screenshots_github
            cat ../subdomain_results/httpx_output_github.txt | grep "\[SUCCESS\] \[200\]" | awk '{print $1}' > urls.txt
            gowitness scan file -f urls.txt --threads 10 --screenshot-path ./screenshots --write-db
            cd ..
          fi
      
      - name: Upload github screenshots
        uses: actions/upload-artifact@v4
        with:
          name: github-screenshots-${{ env.TARGET_DOMAIN }}-${{ github.run_id }}
          path: screenshots_github/
          retention-days: 7

  screenshot-passive-domains:
    needs: probe-passive-domains
    runs-on: ubuntu-latest
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add bin directory to PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          chmod -R +x $GITHUB_WORKSPACE/bin
      
      - name: Set target domain
        run: |
          echo "TARGET_DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
      
      - name: Get httpx results from repository
        run: |
          mkdir -p subdomain_results
          cp subdomains/${{ env.TARGET_DOMAIN }}/httpx_output_passive.txt subdomain_results/ || echo "File not found, will be created later"
      
      - name: Install Chromium for screenshots
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser xvfb
      
      - name: Take screenshots - Passive Domains
        run: |
          if [ -f subdomain_results/httpx_output_passive.txt ]; then
            mkdir -p screenshots_passive
            cd screenshots_passive
            cat ../subdomain_results/httpx_output_passive.txt | grep "\[SUCCESS\] \[200\]" | awk '{print $1}' > urls.txt
            gowitness scan file -f urls.txt --threads 10 --screenshot-path ./screenshots --write-db
            cd ..
          fi
      
      - name: Upload passive screenshots
        uses: actions/upload-artifact@v4
        with:
          name: passive-screenshots-${{ env.TARGET_DOMAIN }}-${{ github.run_id }}
          path: screenshots_passive/
          retention-days: 7
